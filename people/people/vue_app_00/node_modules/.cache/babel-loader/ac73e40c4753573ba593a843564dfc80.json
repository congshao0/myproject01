{"remainingRequest":"C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\src\\components\\xz\\Cart.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\src\\components\\xz\\Cart.vue","mtime":1567410638000},{"path":"C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"C:\\Users\\web\\Desktop\\LC\\four\\VUEx\\day05\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      list: [] //当前登录用户购物车列表\n\n    };\n  },\n  created: function created() {\n    //当前组件创建成功回调函数\n    this.loadMore();\n  },\n  methods: {\n    selectAll: function selectAll(event) {\n      //功能:为全选按钮绑定事件 change\n      //当全选按钮状态为checked=true\n      //所有商品列表 cb=true\n      //当全选按钮状态为checked=false\n      //所有商品列表 cb=false\n      //(1)获取当前按钮状态 true\n      var cb = event.target.checked; //(2)创建循环遍历所有商品属性cb值与全选状态\n      //   一致\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n          item.cb = cb;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    deleteItems: function deleteItems() {\n      var _this = this;\n\n      //功能:删除用户删除中多个商品\n      //(1)显示确认对话框\n      this.$messagebox.confirm(\"是否删除指定数据\").then(function (res) {\n        //(2)创建变量保存选中id值  id\n        var id = \"\"; //1,2,3\n        //(3)创建循环遍历数组中每个元素\n\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var item = _step2.value;\n\n            //(4)判断当前元素属性cb是否等于true\n            if (item.cb) {\n              //(5)拼接id      2,3,4,\n              id += item.id + \",\";\n            }\n          } //for end\n          //(6)去除字符串中最后一个逗号\n          //id=\"2,3,4,\"\n\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        id = id.slice(0, -1); //(7)判断用户是否选中商品 请选择需要删除商品\n\n        if (id == \"\") {\n          _this.$toast(\"请选择需要删除商品\");\n\n          return;\n        } //(8)创建url 创建obj 发送ajax请求\n\n\n        var url = \"delItems\";\n        var obj = {\n          id: id\n        };\n\n        _this.axios.get(url, {\n          params: obj\n        }).then(function (res) {\n          //(9)获取服务器返回数据\n          //(10)判断删除多个商品是否成功\n          if (res.data.code == -1) {\n            _this.$toast(\"删除失败\");\n          } else {\n            _this.$toast(\"删除成功\");\n\n            _this.loadMore();\n          } //(11)刷新操作 loadMore()\n\n        });\n      });\n    },\n    deleteItem: function deleteItem(event) {\n      var _this2 = this;\n\n      //功能:用户点击删除按钮完成删除指定商品任务\n      //(1)为按钮绑定点击事件调用deleteItem \n      //(2)显示确认框如果用户选 确定\n      this.$messagebox.confirm(\"是否删除指定数据\").then(function (res) {\n        //(3)将当前商品id传递函数\n        var id = event.target.dataset.id; //(4)发送ajax请示完成删除任务\n\n        var url = \"delItem\";\n        var obj = {\n          id: id\n        };\n\n        _this2.axios.get(url, {\n          params: obj\n        }).then(function (res) {\n          if (res.data.code == 1) {\n            _this2.$toast(\"删除成功\");\n\n            _this2.loadMore(); //刷新\n\n          } else {\n            _this2.$toast(\"删除失败\");\n          }\n        }); //(5)删除成功 提示\"删除成功\"\n\n      }).catch(function (err) {});\n    },\n    loadMore: function loadMore() {\n      var _this3 = this;\n\n      //功能:获取当前用户购物车列表\n      //1:创建url请求服务器地址\n      var url = \"carts\"; //2:发送ajax 请求(让服务器程序完成功能)\n\n      this.axios.get(url).then(function (res) {\n        if (res.data.code == -1) {\n          //4:如果服务器返回-1 请登录\n          _this3.$messagebox(\"消息\", \"请登录\").then(function (res) {\n            //回调函数（用户点击确认按钮后调用函数）\n            _this3.$router.push(\"/Login\");\n          });\n        } else {\n          //3:获取服务器返回数据\n          //this.list = res.data.data;\n          //添加一个新功能:为数据添加属性cb\n          //3.1:创建循环遍历res.data.data中数据(顺序)\n          var rows = res.data.data;\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = rows[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var item = _step3.value;\n              //3.2:为其添加属性cb值false(顺序)\n              item.cb = false;\n            } //3.3:将新数组赋值list(顺序)\n\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          _this3.list = rows;\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["Cart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"cart\">\r\n    <!--1:顶部复选框：全选-->\r\n    <div class=\"selectall\">\r\n    全选 <input type=\"checkbox\" @change=\"selectAll\"/>\r\n    </div>\r\n    <!--2:商品信息-->\r\n    <div class=\"cart-item\" v-for=\"(item,index) of list\" :key=\"index\">\r\n      <div class=\"leftText\">\r\n        <input type=\"checkbox\" v-model=\"item.cb\"/>\r\n        <div class=\"lname\">{{item.lname}}</div>\r\n        <div class=\"price\">{{item.price}}</div>\r\n      </div>\r\n      <mt-button @click=\"deleteItem\" \r\n      :data-id=\"item.id\">删除</mt-button>\r\n    </div>\r\n    <!--3:购物中商品数量:删除选中商品,清空购物车-->\r\n    <div>\r\n      购物车中商品数量\r\n      <span style=\"color:red\">0</span>\r\n      <mt-button @click=\"deleteItems\">删除选中商品</mt-button>\r\n      <mt-button>清空购物车</mt-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data(){\r\n    return {\r\n      list:[]   //当前登录用户购物车列表\r\n    }\r\n  },\r\n  created() {\r\n    //当前组件创建成功回调函数\r\n    this.loadMore();\r\n  },\r\n  methods:{\r\n    selectAll(event){\r\n      //功能:为全选按钮绑定事件 change\r\n      //当全选按钮状态为checked=true\r\n      //所有商品列表 cb=true\r\n      //当全选按钮状态为checked=false\r\n      //所有商品列表 cb=false\r\n      //(1)获取当前按钮状态 true\r\n      var cb = event.target.checked\r\n      //(2)创建循环遍历所有商品属性cb值与全选状态\r\n      //   一致\r\n      for(var item of this.list){\r\n        item.cb = cb;\r\n      }\r\n    },\r\n    deleteItems(){\r\n      //功能:删除用户删除中多个商品\r\n      //(1)显示确认对话框\r\n      this.$messagebox.confirm(\"是否删除指定数据\").then(res=>{\r\n       //(2)创建变量保存选中id值  id\r\n       var id = \"\";  //1,2,3\r\n       //(3)创建循环遍历数组中每个元素\r\n       for(var item of this.list){\r\n        //(4)判断当前元素属性cb是否等于true\r\n        if(item.cb){\r\n         //(5)拼接id      2,3,4,\r\n         id+=item.id+\",\";\r\n        }\r\n       }//for end\r\n       //(6)去除字符串中最后一个逗号\r\n       //id=\"2,3,4,\"\r\n       id = id.slice(0,-1);\r\n      //(7)判断用户是否选中商品 请选择需要删除商品\r\n      if(id==\"\"){\r\n        this.$toast(\"请选择需要删除商品\");\r\n        return;\r\n      }\r\n      //(8)创建url 创建obj 发送ajax请求\r\n      var url = \"delItems\";\r\n      var obj = {id:id};\r\n      this.axios.get(url,{params:obj}).then(res=>{\r\n       //(9)获取服务器返回数据\r\n       //(10)判断删除多个商品是否成功\r\n       if(res.data.code==-1){\r\n         this.$toast(\"删除失败\");\r\n       }else{\r\n         this.$toast(\"删除成功\");\r\n         this.loadMore();\r\n       }\r\n       //(11)刷新操作 loadMore()\r\n      })\r\n      })\r\n    },\r\n    deleteItem(event){\r\n      //功能:用户点击删除按钮完成删除指定商品任务\r\n      //(1)为按钮绑定点击事件调用deleteItem \r\n      //(2)显示确认框如果用户选 确定\r\n      this.$messagebox.confirm(\"是否删除指定数据\").then(res=>{\r\n       //(3)将当前商品id传递函数\r\n       var id = event.target.dataset.id;\r\n       //(4)发送ajax请示完成删除任务\r\n       var url=\"delItem\";\r\n       var obj={id:id};\r\n       this.axios.get(url,{\r\n         params:obj\r\n       }).then(res=>{\r\n         if(res.data.code==1){\r\n          this.$toast(\"删除成功\");\r\n          this.loadMore();//刷新\r\n         }else{\r\n          this.$toast(\"删除失败\"); \r\n         }\r\n       }) \r\n       //(5)删除成功 提示\"删除成功\"\r\n      }).catch(err=>{\r\n      })\r\n    },\r\n    loadMore(){\r\n      //功能:获取当前用户购物车列表\r\n      //1:创建url请求服务器地址\r\n      var url = \"carts\";\r\n      //2:发送ajax 请求(让服务器程序完成功能)\r\n      this.axios.get(url).then(res=>{\r\n        if(res.data.code == -1){\r\n         //4:如果服务器返回-1 请登录\r\n         this.$messagebox(\"消息\",\"请登录\").then(res=>{\r\n          //回调函数（用户点击确认按钮后调用函数）\r\n          this.$router.push(\"/Login\")\r\n         })\r\n        }else{\r\n      //3:获取服务器返回数据\r\n      //this.list = res.data.data;\r\n      //添加一个新功能:为数据添加属性cb\r\n      //3.1:创建循环遍历res.data.data中数据(顺序)\r\n      var rows = res.data.data;\r\n      for(var item of rows){\r\n       //3.2:为其添加属性cb值false(顺序)\r\n       item.cb = false;\r\n      }\r\n      //3.3:将新数组赋值list(顺序)\r\n      this.list = rows;\r\n     }\r\n   })\r\n  }\r\n }\r\n}\r\n</script>\r\n<style>\r\n/*1:商品项目元素*/\r\n.cart-item{\r\n  display: flex;/*弹性布局*/\r\n  justify-content: space-between;/*两端对齐*/\r\n  align-items: center;\r\n  border-bottom: 1px solid #ccc;/*底部边线*/\r\n  margin-top:25px;    /*顶部外边距*/\r\n}\r\n/*2:修改左侧文字 复选 商品名称 价格*/\r\n.leftText{\r\n  display: flex;/*子元素水平对齐*/\r\n  align-items: center;/*垂直居中*/\r\n}\r\n/*3:商品名称 9:53*/\r\n.lname{\r\n  margin-left:25px;\r\n}\r\n.price{\r\n  margin-left:25px;\r\n}\r\n</style>\r\n\r\n"],"sourceRoot":"src\\components\\xz"}]}